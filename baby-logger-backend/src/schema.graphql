type Query {
  babies: [Baby!]
  napEvents(babyId: ID!, last: Int, before: String, after: String): [NapEvent]
  me: User
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  startNap(babyId: ID!, start: String, end: String, status: Status): NapEvent!
  endNap(babyId: ID!, end: String, napId: ID): NapEvent!
  createIntervention(babyId: ID!, severity: Severity): Intervention!
  toggleNap(babyId: ID!, timestamp: String): NapEvent!
  updateNapEvent(id: ID!, start: String, end: String): NapEvent!
  deleteNapEvent(id: ID!): NapEvent!
  recalculateSlots: NapEvent
}


type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  password: String!
  name: String!
  babies: [Baby!]!
}

type Baby {
  id: ID!
  name: String!
  napEvents: [NapEvent!]!
  parent: User!
}

enum Status {
  COMPLETE
  ONGOING
  INCOMPLETE
}

type NapEvent {
  id: ID!
  start: String!
  end: String
  status: Status!
  baby: Baby!
  duration: Int
  slot: String
}

enum Severity {
  LOW
  MEDIUM
  HEAVY
}

type Intervention {
  id: ID!
  timestamp: String!
  severity: Severity
  napEvent: NapEvent!
}

type ScheduleSlot {
  id: ID!
  start: String!
  end: String!
  center: String
  duration: Int
  slot: String!
  baby: Baby!
}