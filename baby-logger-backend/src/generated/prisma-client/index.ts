// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  baby: (where?: BabyWhereInput) => Promise<boolean>;
  intervention: (where?: InterventionWhereInput) => Promise<boolean>;
  napEvent: (where?: NapEventWhereInput) => Promise<boolean>;
  scheduleSlot: (where?: ScheduleSlotWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  baby: (where: BabyWhereUniqueInput) => BabyNullablePromise;
  babies: (args?: {
    where?: BabyWhereInput;
    orderBy?: BabyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Baby>;
  babiesConnection: (args?: {
    where?: BabyWhereInput;
    orderBy?: BabyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BabyConnectionPromise;
  intervention: (
    where: InterventionWhereUniqueInput
  ) => InterventionNullablePromise;
  interventions: (args?: {
    where?: InterventionWhereInput;
    orderBy?: InterventionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Intervention>;
  interventionsConnection: (args?: {
    where?: InterventionWhereInput;
    orderBy?: InterventionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InterventionConnectionPromise;
  napEvent: (where: NapEventWhereUniqueInput) => NapEventNullablePromise;
  napEvents: (args?: {
    where?: NapEventWhereInput;
    orderBy?: NapEventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<NapEvent>;
  napEventsConnection: (args?: {
    where?: NapEventWhereInput;
    orderBy?: NapEventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NapEventConnectionPromise;
  scheduleSlot: (
    where: ScheduleSlotWhereUniqueInput
  ) => ScheduleSlotNullablePromise;
  scheduleSlots: (args?: {
    where?: ScheduleSlotWhereInput;
    orderBy?: ScheduleSlotOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ScheduleSlot>;
  scheduleSlotsConnection: (args?: {
    where?: ScheduleSlotWhereInput;
    orderBy?: ScheduleSlotOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ScheduleSlotConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBaby: (data: BabyCreateInput) => BabyPromise;
  updateBaby: (args: {
    data: BabyUpdateInput;
    where: BabyWhereUniqueInput;
  }) => BabyPromise;
  updateManyBabies: (args: {
    data: BabyUpdateManyMutationInput;
    where?: BabyWhereInput;
  }) => BatchPayloadPromise;
  upsertBaby: (args: {
    where: BabyWhereUniqueInput;
    create: BabyCreateInput;
    update: BabyUpdateInput;
  }) => BabyPromise;
  deleteBaby: (where: BabyWhereUniqueInput) => BabyPromise;
  deleteManyBabies: (where?: BabyWhereInput) => BatchPayloadPromise;
  createIntervention: (data: InterventionCreateInput) => InterventionPromise;
  updateIntervention: (args: {
    data: InterventionUpdateInput;
    where: InterventionWhereUniqueInput;
  }) => InterventionPromise;
  updateManyInterventions: (args: {
    data: InterventionUpdateManyMutationInput;
    where?: InterventionWhereInput;
  }) => BatchPayloadPromise;
  upsertIntervention: (args: {
    where: InterventionWhereUniqueInput;
    create: InterventionCreateInput;
    update: InterventionUpdateInput;
  }) => InterventionPromise;
  deleteIntervention: (
    where: InterventionWhereUniqueInput
  ) => InterventionPromise;
  deleteManyInterventions: (
    where?: InterventionWhereInput
  ) => BatchPayloadPromise;
  createNapEvent: (data: NapEventCreateInput) => NapEventPromise;
  updateNapEvent: (args: {
    data: NapEventUpdateInput;
    where: NapEventWhereUniqueInput;
  }) => NapEventPromise;
  updateManyNapEvents: (args: {
    data: NapEventUpdateManyMutationInput;
    where?: NapEventWhereInput;
  }) => BatchPayloadPromise;
  upsertNapEvent: (args: {
    where: NapEventWhereUniqueInput;
    create: NapEventCreateInput;
    update: NapEventUpdateInput;
  }) => NapEventPromise;
  deleteNapEvent: (where: NapEventWhereUniqueInput) => NapEventPromise;
  deleteManyNapEvents: (where?: NapEventWhereInput) => BatchPayloadPromise;
  createScheduleSlot: (data: ScheduleSlotCreateInput) => ScheduleSlotPromise;
  updateScheduleSlot: (args: {
    data: ScheduleSlotUpdateInput;
    where: ScheduleSlotWhereUniqueInput;
  }) => ScheduleSlotPromise;
  updateManyScheduleSlots: (args: {
    data: ScheduleSlotUpdateManyMutationInput;
    where?: ScheduleSlotWhereInput;
  }) => BatchPayloadPromise;
  upsertScheduleSlot: (args: {
    where: ScheduleSlotWhereUniqueInput;
    create: ScheduleSlotCreateInput;
    update: ScheduleSlotUpdateInput;
  }) => ScheduleSlotPromise;
  deleteScheduleSlot: (
    where: ScheduleSlotWhereUniqueInput
  ) => ScheduleSlotPromise;
  deleteManyScheduleSlots: (
    where?: ScheduleSlotWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  baby: (
    where?: BabySubscriptionWhereInput
  ) => BabySubscriptionPayloadSubscription;
  intervention: (
    where?: InterventionSubscriptionWhereInput
  ) => InterventionSubscriptionPayloadSubscription;
  napEvent: (
    where?: NapEventSubscriptionWhereInput
  ) => NapEventSubscriptionPayloadSubscription;
  scheduleSlot: (
    where?: ScheduleSlotSubscriptionWhereInput
  ) => ScheduleSlotSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Status = "COMPLETE" | "ONGOING" | "INCOMPLETE";

export type NapEventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC"
  | "status_ASC"
  | "status_DESC"
  | "slot_ASC"
  | "slot_DESC";

export type BabyOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type Severity = "LOW" | "MEDIUM" | "HEAVY";

export type InterventionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC"
  | "severity_ASC"
  | "severity_DESC";

export type ScheduleSlotOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC"
  | "center_ASC"
  | "center_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "slot_ASC"
  | "slot_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BabyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NapEventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  start?: Maybe<String>;
  start_not?: Maybe<String>;
  start_in?: Maybe<String[] | String>;
  start_not_in?: Maybe<String[] | String>;
  start_lt?: Maybe<String>;
  start_lte?: Maybe<String>;
  start_gt?: Maybe<String>;
  start_gte?: Maybe<String>;
  start_contains?: Maybe<String>;
  start_not_contains?: Maybe<String>;
  start_starts_with?: Maybe<String>;
  start_not_starts_with?: Maybe<String>;
  start_ends_with?: Maybe<String>;
  start_not_ends_with?: Maybe<String>;
  end?: Maybe<String>;
  end_not?: Maybe<String>;
  end_in?: Maybe<String[] | String>;
  end_not_in?: Maybe<String[] | String>;
  end_lt?: Maybe<String>;
  end_lte?: Maybe<String>;
  end_gt?: Maybe<String>;
  end_gte?: Maybe<String>;
  end_contains?: Maybe<String>;
  end_not_contains?: Maybe<String>;
  end_starts_with?: Maybe<String>;
  end_not_starts_with?: Maybe<String>;
  end_ends_with?: Maybe<String>;
  end_not_ends_with?: Maybe<String>;
  status?: Maybe<Status>;
  status_not?: Maybe<Status>;
  status_in?: Maybe<Status[] | Status>;
  status_not_in?: Maybe<Status[] | Status>;
  baby?: Maybe<BabyWhereInput>;
  slot?: Maybe<String>;
  slot_not?: Maybe<String>;
  slot_in?: Maybe<String[] | String>;
  slot_not_in?: Maybe<String[] | String>;
  slot_lt?: Maybe<String>;
  slot_lte?: Maybe<String>;
  slot_gt?: Maybe<String>;
  slot_gte?: Maybe<String>;
  slot_contains?: Maybe<String>;
  slot_not_contains?: Maybe<String>;
  slot_starts_with?: Maybe<String>;
  slot_not_starts_with?: Maybe<String>;
  slot_ends_with?: Maybe<String>;
  slot_not_ends_with?: Maybe<String>;
  AND?: Maybe<NapEventWhereInput[] | NapEventWhereInput>;
  OR?: Maybe<NapEventWhereInput[] | NapEventWhereInput>;
  NOT?: Maybe<NapEventWhereInput[] | NapEventWhereInput>;
}

export interface BabyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  napEvents_every?: Maybe<NapEventWhereInput>;
  napEvents_some?: Maybe<NapEventWhereInput>;
  napEvents_none?: Maybe<NapEventWhereInput>;
  parent?: Maybe<UserWhereInput>;
  AND?: Maybe<BabyWhereInput[] | BabyWhereInput>;
  OR?: Maybe<BabyWhereInput[] | BabyWhereInput>;
  NOT?: Maybe<BabyWhereInput[] | BabyWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  babies_every?: Maybe<BabyWhereInput>;
  babies_some?: Maybe<BabyWhereInput>;
  babies_none?: Maybe<BabyWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type InterventionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  timestamp?: Maybe<String>;
}>;

export interface InterventionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  timestamp?: Maybe<String>;
  timestamp_not?: Maybe<String>;
  timestamp_in?: Maybe<String[] | String>;
  timestamp_not_in?: Maybe<String[] | String>;
  timestamp_lt?: Maybe<String>;
  timestamp_lte?: Maybe<String>;
  timestamp_gt?: Maybe<String>;
  timestamp_gte?: Maybe<String>;
  timestamp_contains?: Maybe<String>;
  timestamp_not_contains?: Maybe<String>;
  timestamp_starts_with?: Maybe<String>;
  timestamp_not_starts_with?: Maybe<String>;
  timestamp_ends_with?: Maybe<String>;
  timestamp_not_ends_with?: Maybe<String>;
  napEvent?: Maybe<NapEventWhereInput>;
  severity?: Maybe<Severity>;
  severity_not?: Maybe<Severity>;
  severity_in?: Maybe<Severity[] | Severity>;
  severity_not_in?: Maybe<Severity[] | Severity>;
  AND?: Maybe<InterventionWhereInput[] | InterventionWhereInput>;
  OR?: Maybe<InterventionWhereInput[] | InterventionWhereInput>;
  NOT?: Maybe<InterventionWhereInput[] | InterventionWhereInput>;
}

export type NapEventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  start?: Maybe<String>;
  end?: Maybe<String>;
}>;

export type ScheduleSlotWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ScheduleSlotWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  start?: Maybe<String>;
  start_not?: Maybe<String>;
  start_in?: Maybe<String[] | String>;
  start_not_in?: Maybe<String[] | String>;
  start_lt?: Maybe<String>;
  start_lte?: Maybe<String>;
  start_gt?: Maybe<String>;
  start_gte?: Maybe<String>;
  start_contains?: Maybe<String>;
  start_not_contains?: Maybe<String>;
  start_starts_with?: Maybe<String>;
  start_not_starts_with?: Maybe<String>;
  start_ends_with?: Maybe<String>;
  start_not_ends_with?: Maybe<String>;
  end?: Maybe<String>;
  end_not?: Maybe<String>;
  end_in?: Maybe<String[] | String>;
  end_not_in?: Maybe<String[] | String>;
  end_lt?: Maybe<String>;
  end_lte?: Maybe<String>;
  end_gt?: Maybe<String>;
  end_gte?: Maybe<String>;
  end_contains?: Maybe<String>;
  end_not_contains?: Maybe<String>;
  end_starts_with?: Maybe<String>;
  end_not_starts_with?: Maybe<String>;
  end_ends_with?: Maybe<String>;
  end_not_ends_with?: Maybe<String>;
  center?: Maybe<String>;
  center_not?: Maybe<String>;
  center_in?: Maybe<String[] | String>;
  center_not_in?: Maybe<String[] | String>;
  center_lt?: Maybe<String>;
  center_lte?: Maybe<String>;
  center_gt?: Maybe<String>;
  center_gte?: Maybe<String>;
  center_contains?: Maybe<String>;
  center_not_contains?: Maybe<String>;
  center_starts_with?: Maybe<String>;
  center_not_starts_with?: Maybe<String>;
  center_ends_with?: Maybe<String>;
  center_not_ends_with?: Maybe<String>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  slot?: Maybe<String>;
  slot_not?: Maybe<String>;
  slot_in?: Maybe<String[] | String>;
  slot_not_in?: Maybe<String[] | String>;
  slot_lt?: Maybe<String>;
  slot_lte?: Maybe<String>;
  slot_gt?: Maybe<String>;
  slot_gte?: Maybe<String>;
  slot_contains?: Maybe<String>;
  slot_not_contains?: Maybe<String>;
  slot_starts_with?: Maybe<String>;
  slot_not_starts_with?: Maybe<String>;
  slot_ends_with?: Maybe<String>;
  slot_not_ends_with?: Maybe<String>;
  baby?: Maybe<BabyWhereInput>;
  AND?: Maybe<ScheduleSlotWhereInput[] | ScheduleSlotWhereInput>;
  OR?: Maybe<ScheduleSlotWhereInput[] | ScheduleSlotWhereInput>;
  NOT?: Maybe<ScheduleSlotWhereInput[] | ScheduleSlotWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface BabyCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  napEvents?: Maybe<NapEventCreateManyWithoutBabyInput>;
  parent: UserCreateOneWithoutBabiesInput;
}

export interface NapEventCreateManyWithoutBabyInput {
  create?: Maybe<
    NapEventCreateWithoutBabyInput[] | NapEventCreateWithoutBabyInput
  >;
  connect?: Maybe<NapEventWhereUniqueInput[] | NapEventWhereUniqueInput>;
}

export interface NapEventCreateWithoutBabyInput {
  id?: Maybe<ID_Input>;
  start: String;
  end?: Maybe<String>;
  status: Status;
  slot?: Maybe<String>;
}

export interface UserCreateOneWithoutBabiesInput {
  create?: Maybe<UserCreateWithoutBabiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutBabiesInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
}

export interface BabyUpdateInput {
  name?: Maybe<String>;
  napEvents?: Maybe<NapEventUpdateManyWithoutBabyInput>;
  parent?: Maybe<UserUpdateOneRequiredWithoutBabiesInput>;
}

export interface NapEventUpdateManyWithoutBabyInput {
  create?: Maybe<
    NapEventCreateWithoutBabyInput[] | NapEventCreateWithoutBabyInput
  >;
  delete?: Maybe<NapEventWhereUniqueInput[] | NapEventWhereUniqueInput>;
  connect?: Maybe<NapEventWhereUniqueInput[] | NapEventWhereUniqueInput>;
  set?: Maybe<NapEventWhereUniqueInput[] | NapEventWhereUniqueInput>;
  disconnect?: Maybe<NapEventWhereUniqueInput[] | NapEventWhereUniqueInput>;
  update?: Maybe<
    | NapEventUpdateWithWhereUniqueWithoutBabyInput[]
    | NapEventUpdateWithWhereUniqueWithoutBabyInput
  >;
  upsert?: Maybe<
    | NapEventUpsertWithWhereUniqueWithoutBabyInput[]
    | NapEventUpsertWithWhereUniqueWithoutBabyInput
  >;
  deleteMany?: Maybe<NapEventScalarWhereInput[] | NapEventScalarWhereInput>;
  updateMany?: Maybe<
    | NapEventUpdateManyWithWhereNestedInput[]
    | NapEventUpdateManyWithWhereNestedInput
  >;
}

export interface NapEventUpdateWithWhereUniqueWithoutBabyInput {
  where: NapEventWhereUniqueInput;
  data: NapEventUpdateWithoutBabyDataInput;
}

export interface NapEventUpdateWithoutBabyDataInput {
  start?: Maybe<String>;
  end?: Maybe<String>;
  status?: Maybe<Status>;
  slot?: Maybe<String>;
}

export interface NapEventUpsertWithWhereUniqueWithoutBabyInput {
  where: NapEventWhereUniqueInput;
  update: NapEventUpdateWithoutBabyDataInput;
  create: NapEventCreateWithoutBabyInput;
}

export interface NapEventScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  start?: Maybe<String>;
  start_not?: Maybe<String>;
  start_in?: Maybe<String[] | String>;
  start_not_in?: Maybe<String[] | String>;
  start_lt?: Maybe<String>;
  start_lte?: Maybe<String>;
  start_gt?: Maybe<String>;
  start_gte?: Maybe<String>;
  start_contains?: Maybe<String>;
  start_not_contains?: Maybe<String>;
  start_starts_with?: Maybe<String>;
  start_not_starts_with?: Maybe<String>;
  start_ends_with?: Maybe<String>;
  start_not_ends_with?: Maybe<String>;
  end?: Maybe<String>;
  end_not?: Maybe<String>;
  end_in?: Maybe<String[] | String>;
  end_not_in?: Maybe<String[] | String>;
  end_lt?: Maybe<String>;
  end_lte?: Maybe<String>;
  end_gt?: Maybe<String>;
  end_gte?: Maybe<String>;
  end_contains?: Maybe<String>;
  end_not_contains?: Maybe<String>;
  end_starts_with?: Maybe<String>;
  end_not_starts_with?: Maybe<String>;
  end_ends_with?: Maybe<String>;
  end_not_ends_with?: Maybe<String>;
  status?: Maybe<Status>;
  status_not?: Maybe<Status>;
  status_in?: Maybe<Status[] | Status>;
  status_not_in?: Maybe<Status[] | Status>;
  slot?: Maybe<String>;
  slot_not?: Maybe<String>;
  slot_in?: Maybe<String[] | String>;
  slot_not_in?: Maybe<String[] | String>;
  slot_lt?: Maybe<String>;
  slot_lte?: Maybe<String>;
  slot_gt?: Maybe<String>;
  slot_gte?: Maybe<String>;
  slot_contains?: Maybe<String>;
  slot_not_contains?: Maybe<String>;
  slot_starts_with?: Maybe<String>;
  slot_not_starts_with?: Maybe<String>;
  slot_ends_with?: Maybe<String>;
  slot_not_ends_with?: Maybe<String>;
  AND?: Maybe<NapEventScalarWhereInput[] | NapEventScalarWhereInput>;
  OR?: Maybe<NapEventScalarWhereInput[] | NapEventScalarWhereInput>;
  NOT?: Maybe<NapEventScalarWhereInput[] | NapEventScalarWhereInput>;
}

export interface NapEventUpdateManyWithWhereNestedInput {
  where: NapEventScalarWhereInput;
  data: NapEventUpdateManyDataInput;
}

export interface NapEventUpdateManyDataInput {
  start?: Maybe<String>;
  end?: Maybe<String>;
  status?: Maybe<Status>;
  slot?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutBabiesInput {
  create?: Maybe<UserCreateWithoutBabiesInput>;
  update?: Maybe<UserUpdateWithoutBabiesDataInput>;
  upsert?: Maybe<UserUpsertWithoutBabiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutBabiesDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
}

export interface UserUpsertWithoutBabiesInput {
  update: UserUpdateWithoutBabiesDataInput;
  create: UserCreateWithoutBabiesInput;
}

export interface BabyUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface InterventionCreateInput {
  id?: Maybe<ID_Input>;
  timestamp: String;
  napEvent: NapEventCreateOneInput;
  severity?: Maybe<Severity>;
}

export interface NapEventCreateOneInput {
  create?: Maybe<NapEventCreateInput>;
  connect?: Maybe<NapEventWhereUniqueInput>;
}

export interface NapEventCreateInput {
  id?: Maybe<ID_Input>;
  start: String;
  end?: Maybe<String>;
  status: Status;
  baby: BabyCreateOneWithoutNapEventsInput;
  slot?: Maybe<String>;
}

export interface BabyCreateOneWithoutNapEventsInput {
  create?: Maybe<BabyCreateWithoutNapEventsInput>;
  connect?: Maybe<BabyWhereUniqueInput>;
}

export interface BabyCreateWithoutNapEventsInput {
  id?: Maybe<ID_Input>;
  name: String;
  parent: UserCreateOneWithoutBabiesInput;
}

export interface InterventionUpdateInput {
  timestamp?: Maybe<String>;
  napEvent?: Maybe<NapEventUpdateOneRequiredInput>;
  severity?: Maybe<Severity>;
}

export interface NapEventUpdateOneRequiredInput {
  create?: Maybe<NapEventCreateInput>;
  update?: Maybe<NapEventUpdateDataInput>;
  upsert?: Maybe<NapEventUpsertNestedInput>;
  connect?: Maybe<NapEventWhereUniqueInput>;
}

export interface NapEventUpdateDataInput {
  start?: Maybe<String>;
  end?: Maybe<String>;
  status?: Maybe<Status>;
  baby?: Maybe<BabyUpdateOneRequiredWithoutNapEventsInput>;
  slot?: Maybe<String>;
}

export interface BabyUpdateOneRequiredWithoutNapEventsInput {
  create?: Maybe<BabyCreateWithoutNapEventsInput>;
  update?: Maybe<BabyUpdateWithoutNapEventsDataInput>;
  upsert?: Maybe<BabyUpsertWithoutNapEventsInput>;
  connect?: Maybe<BabyWhereUniqueInput>;
}

export interface BabyUpdateWithoutNapEventsDataInput {
  name?: Maybe<String>;
  parent?: Maybe<UserUpdateOneRequiredWithoutBabiesInput>;
}

export interface BabyUpsertWithoutNapEventsInput {
  update: BabyUpdateWithoutNapEventsDataInput;
  create: BabyCreateWithoutNapEventsInput;
}

export interface NapEventUpsertNestedInput {
  update: NapEventUpdateDataInput;
  create: NapEventCreateInput;
}

export interface InterventionUpdateManyMutationInput {
  timestamp?: Maybe<String>;
  severity?: Maybe<Severity>;
}

export interface NapEventUpdateInput {
  start?: Maybe<String>;
  end?: Maybe<String>;
  status?: Maybe<Status>;
  baby?: Maybe<BabyUpdateOneRequiredWithoutNapEventsInput>;
  slot?: Maybe<String>;
}

export interface NapEventUpdateManyMutationInput {
  start?: Maybe<String>;
  end?: Maybe<String>;
  status?: Maybe<Status>;
  slot?: Maybe<String>;
}

export interface ScheduleSlotCreateInput {
  id?: Maybe<ID_Input>;
  start: String;
  end: String;
  center?: Maybe<String>;
  duration?: Maybe<Int>;
  slot: String;
  baby: BabyCreateOneInput;
}

export interface BabyCreateOneInput {
  create?: Maybe<BabyCreateInput>;
  connect?: Maybe<BabyWhereUniqueInput>;
}

export interface ScheduleSlotUpdateInput {
  start?: Maybe<String>;
  end?: Maybe<String>;
  center?: Maybe<String>;
  duration?: Maybe<Int>;
  slot?: Maybe<String>;
  baby?: Maybe<BabyUpdateOneRequiredInput>;
}

export interface BabyUpdateOneRequiredInput {
  create?: Maybe<BabyCreateInput>;
  update?: Maybe<BabyUpdateDataInput>;
  upsert?: Maybe<BabyUpsertNestedInput>;
  connect?: Maybe<BabyWhereUniqueInput>;
}

export interface BabyUpdateDataInput {
  name?: Maybe<String>;
  napEvents?: Maybe<NapEventUpdateManyWithoutBabyInput>;
  parent?: Maybe<UserUpdateOneRequiredWithoutBabiesInput>;
}

export interface BabyUpsertNestedInput {
  update: BabyUpdateDataInput;
  create: BabyCreateInput;
}

export interface ScheduleSlotUpdateManyMutationInput {
  start?: Maybe<String>;
  end?: Maybe<String>;
  center?: Maybe<String>;
  duration?: Maybe<Int>;
  slot?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
  babies?: Maybe<BabyCreateManyWithoutParentInput>;
}

export interface BabyCreateManyWithoutParentInput {
  create?: Maybe<BabyCreateWithoutParentInput[] | BabyCreateWithoutParentInput>;
  connect?: Maybe<BabyWhereUniqueInput[] | BabyWhereUniqueInput>;
}

export interface BabyCreateWithoutParentInput {
  id?: Maybe<ID_Input>;
  name: String;
  napEvents?: Maybe<NapEventCreateManyWithoutBabyInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  babies?: Maybe<BabyUpdateManyWithoutParentInput>;
}

export interface BabyUpdateManyWithoutParentInput {
  create?: Maybe<BabyCreateWithoutParentInput[] | BabyCreateWithoutParentInput>;
  delete?: Maybe<BabyWhereUniqueInput[] | BabyWhereUniqueInput>;
  connect?: Maybe<BabyWhereUniqueInput[] | BabyWhereUniqueInput>;
  set?: Maybe<BabyWhereUniqueInput[] | BabyWhereUniqueInput>;
  disconnect?: Maybe<BabyWhereUniqueInput[] | BabyWhereUniqueInput>;
  update?: Maybe<
    | BabyUpdateWithWhereUniqueWithoutParentInput[]
    | BabyUpdateWithWhereUniqueWithoutParentInput
  >;
  upsert?: Maybe<
    | BabyUpsertWithWhereUniqueWithoutParentInput[]
    | BabyUpsertWithWhereUniqueWithoutParentInput
  >;
  deleteMany?: Maybe<BabyScalarWhereInput[] | BabyScalarWhereInput>;
  updateMany?: Maybe<
    BabyUpdateManyWithWhereNestedInput[] | BabyUpdateManyWithWhereNestedInput
  >;
}

export interface BabyUpdateWithWhereUniqueWithoutParentInput {
  where: BabyWhereUniqueInput;
  data: BabyUpdateWithoutParentDataInput;
}

export interface BabyUpdateWithoutParentDataInput {
  name?: Maybe<String>;
  napEvents?: Maybe<NapEventUpdateManyWithoutBabyInput>;
}

export interface BabyUpsertWithWhereUniqueWithoutParentInput {
  where: BabyWhereUniqueInput;
  update: BabyUpdateWithoutParentDataInput;
  create: BabyCreateWithoutParentInput;
}

export interface BabyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<BabyScalarWhereInput[] | BabyScalarWhereInput>;
  OR?: Maybe<BabyScalarWhereInput[] | BabyScalarWhereInput>;
  NOT?: Maybe<BabyScalarWhereInput[] | BabyScalarWhereInput>;
}

export interface BabyUpdateManyWithWhereNestedInput {
  where: BabyScalarWhereInput;
  data: BabyUpdateManyDataInput;
}

export interface BabyUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
}

export interface BabySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BabyWhereInput>;
  AND?: Maybe<BabySubscriptionWhereInput[] | BabySubscriptionWhereInput>;
  OR?: Maybe<BabySubscriptionWhereInput[] | BabySubscriptionWhereInput>;
  NOT?: Maybe<BabySubscriptionWhereInput[] | BabySubscriptionWhereInput>;
}

export interface InterventionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InterventionWhereInput>;
  AND?: Maybe<
    InterventionSubscriptionWhereInput[] | InterventionSubscriptionWhereInput
  >;
  OR?: Maybe<
    InterventionSubscriptionWhereInput[] | InterventionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    InterventionSubscriptionWhereInput[] | InterventionSubscriptionWhereInput
  >;
}

export interface NapEventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NapEventWhereInput>;
  AND?: Maybe<
    NapEventSubscriptionWhereInput[] | NapEventSubscriptionWhereInput
  >;
  OR?: Maybe<NapEventSubscriptionWhereInput[] | NapEventSubscriptionWhereInput>;
  NOT?: Maybe<
    NapEventSubscriptionWhereInput[] | NapEventSubscriptionWhereInput
  >;
}

export interface ScheduleSlotSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ScheduleSlotWhereInput>;
  AND?: Maybe<
    ScheduleSlotSubscriptionWhereInput[] | ScheduleSlotSubscriptionWhereInput
  >;
  OR?: Maybe<
    ScheduleSlotSubscriptionWhereInput[] | ScheduleSlotSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ScheduleSlotSubscriptionWhereInput[] | ScheduleSlotSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Baby {
  id: ID_Output;
  name: String;
}

export interface BabyPromise extends Promise<Baby>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  napEvents: <T = FragmentableArray<NapEvent>>(args?: {
    where?: NapEventWhereInput;
    orderBy?: NapEventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  parent: <T = UserPromise>() => T;
}

export interface BabySubscription
  extends Promise<AsyncIterator<Baby>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  napEvents: <T = Promise<AsyncIterator<NapEventSubscription>>>(args?: {
    where?: NapEventWhereInput;
    orderBy?: NapEventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  parent: <T = UserSubscription>() => T;
}

export interface BabyNullablePromise
  extends Promise<Baby | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  napEvents: <T = FragmentableArray<NapEvent>>(args?: {
    where?: NapEventWhereInput;
    orderBy?: NapEventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  parent: <T = UserPromise>() => T;
}

export interface NapEvent {
  id: ID_Output;
  start: String;
  end?: String;
  status: Status;
  slot?: String;
}

export interface NapEventPromise extends Promise<NapEvent>, Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<String>;
  end: () => Promise<String>;
  status: () => Promise<Status>;
  baby: <T = BabyPromise>() => T;
  slot: () => Promise<String>;
}

export interface NapEventSubscription
  extends Promise<AsyncIterator<NapEvent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: () => Promise<AsyncIterator<String>>;
  end: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Status>>;
  baby: <T = BabySubscription>() => T;
  slot: () => Promise<AsyncIterator<String>>;
}

export interface NapEventNullablePromise
  extends Promise<NapEvent | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<String>;
  end: () => Promise<String>;
  status: () => Promise<Status>;
  baby: <T = BabyPromise>() => T;
  slot: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  babies: <T = FragmentableArray<Baby>>(args?: {
    where?: BabyWhereInput;
    orderBy?: BabyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  babies: <T = Promise<AsyncIterator<BabySubscription>>>(args?: {
    where?: BabyWhereInput;
    orderBy?: BabyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  babies: <T = FragmentableArray<Baby>>(args?: {
    where?: BabyWhereInput;
    orderBy?: BabyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BabyConnection {
  pageInfo: PageInfo;
  edges: BabyEdge[];
}

export interface BabyConnectionPromise
  extends Promise<BabyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BabyEdge>>() => T;
  aggregate: <T = AggregateBabyPromise>() => T;
}

export interface BabyConnectionSubscription
  extends Promise<AsyncIterator<BabyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BabyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBabySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BabyEdge {
  node: Baby;
  cursor: String;
}

export interface BabyEdgePromise extends Promise<BabyEdge>, Fragmentable {
  node: <T = BabyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BabyEdgeSubscription
  extends Promise<AsyncIterator<BabyEdge>>,
    Fragmentable {
  node: <T = BabySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBaby {
  count: Int;
}

export interface AggregateBabyPromise
  extends Promise<AggregateBaby>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBabySubscription
  extends Promise<AsyncIterator<AggregateBaby>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Intervention {
  id: ID_Output;
  timestamp: String;
  severity?: Severity;
}

export interface InterventionPromise
  extends Promise<Intervention>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  timestamp: () => Promise<String>;
  napEvent: <T = NapEventPromise>() => T;
  severity: () => Promise<Severity>;
}

export interface InterventionSubscription
  extends Promise<AsyncIterator<Intervention>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  timestamp: () => Promise<AsyncIterator<String>>;
  napEvent: <T = NapEventSubscription>() => T;
  severity: () => Promise<AsyncIterator<Severity>>;
}

export interface InterventionNullablePromise
  extends Promise<Intervention | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  timestamp: () => Promise<String>;
  napEvent: <T = NapEventPromise>() => T;
  severity: () => Promise<Severity>;
}

export interface InterventionConnection {
  pageInfo: PageInfo;
  edges: InterventionEdge[];
}

export interface InterventionConnectionPromise
  extends Promise<InterventionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InterventionEdge>>() => T;
  aggregate: <T = AggregateInterventionPromise>() => T;
}

export interface InterventionConnectionSubscription
  extends Promise<AsyncIterator<InterventionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InterventionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInterventionSubscription>() => T;
}

export interface InterventionEdge {
  node: Intervention;
  cursor: String;
}

export interface InterventionEdgePromise
  extends Promise<InterventionEdge>,
    Fragmentable {
  node: <T = InterventionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InterventionEdgeSubscription
  extends Promise<AsyncIterator<InterventionEdge>>,
    Fragmentable {
  node: <T = InterventionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIntervention {
  count: Int;
}

export interface AggregateInterventionPromise
  extends Promise<AggregateIntervention>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInterventionSubscription
  extends Promise<AsyncIterator<AggregateIntervention>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NapEventConnection {
  pageInfo: PageInfo;
  edges: NapEventEdge[];
}

export interface NapEventConnectionPromise
  extends Promise<NapEventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NapEventEdge>>() => T;
  aggregate: <T = AggregateNapEventPromise>() => T;
}

export interface NapEventConnectionSubscription
  extends Promise<AsyncIterator<NapEventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NapEventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNapEventSubscription>() => T;
}

export interface NapEventEdge {
  node: NapEvent;
  cursor: String;
}

export interface NapEventEdgePromise
  extends Promise<NapEventEdge>,
    Fragmentable {
  node: <T = NapEventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NapEventEdgeSubscription
  extends Promise<AsyncIterator<NapEventEdge>>,
    Fragmentable {
  node: <T = NapEventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNapEvent {
  count: Int;
}

export interface AggregateNapEventPromise
  extends Promise<AggregateNapEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNapEventSubscription
  extends Promise<AsyncIterator<AggregateNapEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ScheduleSlot {
  id: ID_Output;
  start: String;
  end: String;
  center?: String;
  duration?: Int;
  slot: String;
}

export interface ScheduleSlotPromise
  extends Promise<ScheduleSlot>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<String>;
  end: () => Promise<String>;
  center: () => Promise<String>;
  duration: () => Promise<Int>;
  slot: () => Promise<String>;
  baby: <T = BabyPromise>() => T;
}

export interface ScheduleSlotSubscription
  extends Promise<AsyncIterator<ScheduleSlot>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: () => Promise<AsyncIterator<String>>;
  end: () => Promise<AsyncIterator<String>>;
  center: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  slot: () => Promise<AsyncIterator<String>>;
  baby: <T = BabySubscription>() => T;
}

export interface ScheduleSlotNullablePromise
  extends Promise<ScheduleSlot | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<String>;
  end: () => Promise<String>;
  center: () => Promise<String>;
  duration: () => Promise<Int>;
  slot: () => Promise<String>;
  baby: <T = BabyPromise>() => T;
}

export interface ScheduleSlotConnection {
  pageInfo: PageInfo;
  edges: ScheduleSlotEdge[];
}

export interface ScheduleSlotConnectionPromise
  extends Promise<ScheduleSlotConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScheduleSlotEdge>>() => T;
  aggregate: <T = AggregateScheduleSlotPromise>() => T;
}

export interface ScheduleSlotConnectionSubscription
  extends Promise<AsyncIterator<ScheduleSlotConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScheduleSlotEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScheduleSlotSubscription>() => T;
}

export interface ScheduleSlotEdge {
  node: ScheduleSlot;
  cursor: String;
}

export interface ScheduleSlotEdgePromise
  extends Promise<ScheduleSlotEdge>,
    Fragmentable {
  node: <T = ScheduleSlotPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScheduleSlotEdgeSubscription
  extends Promise<AsyncIterator<ScheduleSlotEdge>>,
    Fragmentable {
  node: <T = ScheduleSlotSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateScheduleSlot {
  count: Int;
}

export interface AggregateScheduleSlotPromise
  extends Promise<AggregateScheduleSlot>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScheduleSlotSubscription
  extends Promise<AsyncIterator<AggregateScheduleSlot>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BabySubscriptionPayload {
  mutation: MutationType;
  node: Baby;
  updatedFields: String[];
  previousValues: BabyPreviousValues;
}

export interface BabySubscriptionPayloadPromise
  extends Promise<BabySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BabyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BabyPreviousValuesPromise>() => T;
}

export interface BabySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BabySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BabySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BabyPreviousValuesSubscription>() => T;
}

export interface BabyPreviousValues {
  id: ID_Output;
  name: String;
}

export interface BabyPreviousValuesPromise
  extends Promise<BabyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface BabyPreviousValuesSubscription
  extends Promise<AsyncIterator<BabyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface InterventionSubscriptionPayload {
  mutation: MutationType;
  node: Intervention;
  updatedFields: String[];
  previousValues: InterventionPreviousValues;
}

export interface InterventionSubscriptionPayloadPromise
  extends Promise<InterventionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InterventionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InterventionPreviousValuesPromise>() => T;
}

export interface InterventionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InterventionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InterventionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InterventionPreviousValuesSubscription>() => T;
}

export interface InterventionPreviousValues {
  id: ID_Output;
  timestamp: String;
  severity?: Severity;
}

export interface InterventionPreviousValuesPromise
  extends Promise<InterventionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  timestamp: () => Promise<String>;
  severity: () => Promise<Severity>;
}

export interface InterventionPreviousValuesSubscription
  extends Promise<AsyncIterator<InterventionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  timestamp: () => Promise<AsyncIterator<String>>;
  severity: () => Promise<AsyncIterator<Severity>>;
}

export interface NapEventSubscriptionPayload {
  mutation: MutationType;
  node: NapEvent;
  updatedFields: String[];
  previousValues: NapEventPreviousValues;
}

export interface NapEventSubscriptionPayloadPromise
  extends Promise<NapEventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NapEventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NapEventPreviousValuesPromise>() => T;
}

export interface NapEventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NapEventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NapEventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NapEventPreviousValuesSubscription>() => T;
}

export interface NapEventPreviousValues {
  id: ID_Output;
  start: String;
  end?: String;
  status: Status;
  slot?: String;
}

export interface NapEventPreviousValuesPromise
  extends Promise<NapEventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<String>;
  end: () => Promise<String>;
  status: () => Promise<Status>;
  slot: () => Promise<String>;
}

export interface NapEventPreviousValuesSubscription
  extends Promise<AsyncIterator<NapEventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: () => Promise<AsyncIterator<String>>;
  end: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Status>>;
  slot: () => Promise<AsyncIterator<String>>;
}

export interface ScheduleSlotSubscriptionPayload {
  mutation: MutationType;
  node: ScheduleSlot;
  updatedFields: String[];
  previousValues: ScheduleSlotPreviousValues;
}

export interface ScheduleSlotSubscriptionPayloadPromise
  extends Promise<ScheduleSlotSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ScheduleSlotPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ScheduleSlotPreviousValuesPromise>() => T;
}

export interface ScheduleSlotSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScheduleSlotSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScheduleSlotSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ScheduleSlotPreviousValuesSubscription>() => T;
}

export interface ScheduleSlotPreviousValues {
  id: ID_Output;
  start: String;
  end: String;
  center?: String;
  duration?: Int;
  slot: String;
}

export interface ScheduleSlotPreviousValuesPromise
  extends Promise<ScheduleSlotPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<String>;
  end: () => Promise<String>;
  center: () => Promise<String>;
  duration: () => Promise<Int>;
  slot: () => Promise<String>;
}

export interface ScheduleSlotPreviousValuesSubscription
  extends Promise<AsyncIterator<ScheduleSlotPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: () => Promise<AsyncIterator<String>>;
  end: () => Promise<AsyncIterator<String>>;
  center: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  slot: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Baby",
    embedded: false
  },
  {
    name: "Status",
    embedded: false
  },
  {
    name: "Severity",
    embedded: false
  },
  {
    name: "NapEvent",
    embedded: false
  },
  {
    name: "Intervention",
    embedded: false
  },
  {
    name: "ScheduleSlot",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/public-pinecrest-5/baby-logger-backend/dev`
});
export const prisma = new Prisma();
